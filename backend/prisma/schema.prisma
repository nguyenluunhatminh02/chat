// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatarUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaceMemberships WorkspaceMember[]

  ConversationMember ConversationMember[]
}

enum ConversationType { 
  DIRECT 
  GROUP 
}
enum MemberRole { 
  MEMBER 
  ADMIN 
  OWNER 
}

enum WorkspaceRole { 
  MEMBER 
  ADMIN 
  OWNER 
}

model Workspace {
  id        String            @id @default(cuid())
  name      String
  createdAt DateTime          @default(now())

  members       WorkspaceMember[]
  conversations Conversation[]
}

model WorkspaceMember {
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)
  joinedAt    DateTime      @default(now())

  workspace   Workspace     @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([workspaceId, userId])
  @@index([userId])
}

model Conversation {
  id          String   @id @default(cuid())
  type        ConversationType
  title       String?
  createdById String
  workspaceId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  members     ConversationMember[]
  message     Message[]
  pin         Pin[]

  @@index([type])
  @@index([workspaceId, updatedAt])
}

model ConversationMember {
  id             String   @id @default(cuid())
  conversationId String
  userId         String
  role           MemberRole @default(MEMBER)
  lastReadAt     DateTime?
  pinned         Boolean @default(false)
  muted          Boolean @default(false)
  joinedAt       DateTime @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([conversationId, userId])
}

enum MessageType { 
  TEXT 
  IMAGE 
  FILE 
  SYSTEM 
}


model ReadReceipt {
  messageId String
  userId    String
  readAt    DateTime @default(now())

  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId])
}

model Message {
  id             String      @id @default(cuid())
  conversationId String
  senderId       String
  type           MessageType @default(TEXT)
  content        String?
  parentId       String?
  metadata       Json?
  editedAt       DateTime?
  deletedAt      DateTime?
  createdAt      DateTime    @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  // âœ… Thread self-relation
  parent         Message?    @relation("Thread", fields: [parentId], references: [id])
  replies        Message[]   @relation("Thread")
  readReceipt ReadReceipt[]
  reaction Reaction[]
  attachment Attachment[]
  stars Star[]
  pins Pin[]
  mentions Mention[]
  messageLinks MessageLink[]

  // âœ… Index Ä‘á»ƒ load thread nhanh
  @@index([conversationId, createdAt])
  @@index([parentId, createdAt])
}

model Mention {
  messageId String
  userId    String
  createdAt DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId, createdAt])
}

// --- NEW: Reaction ---
model Reaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  emoji     String
  createdAt DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId, emoji])   // má»—i user/emoji chá»‰ 1 láº§n trÃªn 1 message
  @@index([messageId])
}

model Outbox {
  id          String   @id @default(cuid())
  topic       String
  eventKey    String?
  payload     Json
  createdAt   DateTime @default(now())
  publishedAt DateTime?
    claimedAt   DateTime?
  claimedBy   String?
  attempts    Int      @default(0)
  lastError   String?

  @@index([publishedAt, claimedAt, createdAt])
  @@index([topic, createdAt])
  @@unique([topic, eventKey])
}

enum FileStatus { 
  UPLOADING 
  READY 
}

model FileObject {
  id        String     @id @default(cuid())
  bucket    String
  key       String
  mime      String
  size      Int?
  checksum  String?
  status    FileStatus @default(UPLOADING)
  createdAt DateTime   @default(now())

  attachments Attachment[]

  // NEW
  width     Int?
  height    Int?
  thumbKey  String?

  @@unique([bucket, key])
  @@index([status])
}

model Attachment {
  id        String  @id @default(cuid())
  messageId String
  fileId    String

  message   Message    @relation(fields: [messageId], references: [id], onDelete: Cascade)
  file      FileObject @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([messageId, fileId])
}

// ============ PHáº¦N 17: MODERATION ============

enum ReportStatus { 
  OPEN 
  RESOLVED 
  REJECTED 
}

enum ReportType { 
  MESSAGE 
  USER 
  CONVERSATION 
}

enum ReportReason { 
  SPAM 
  ABUSE 
  NSFW 
  HARASSMENT 
  OTHER 
}

model Report {
  id                   String        @id @default(cuid())
  reporterId           String
  type                 ReportType
  targetMessageId      String?
  targetUserId         String?
  targetConversationId String?
  reason               ReportReason
  details              String?
  evidence             Json?
  status               ReportStatus  @default(OPEN)
  action               String?       // NONE | DELETE_MESSAGE | BLOCK_USER
  resolutionNotes      String?
  resolvedById         String?
  createdAt            DateTime      @default(now())
  resolvedAt           DateTime?

  @@index([status, createdAt])
  @@index([reporterId])
}

model Block {
  blockerId     String
  blockedUserId String
  createdAt     DateTime @default(now())
  expiresAt     DateTime?

  @@id([blockerId, blockedUserId])
  @@index([blockedUserId])
  @@index([blockerId])
}

model Ban {
  id         String    @id @default(cuid())
  userId     String
  bannedById String
  reason     String?
  notes      String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?

  @@index([userId])
  @@index([bannedById])
}

model ConversationBan {
  conversationId String
  userId         String
  bannedBy       String
  reason         String?
  createdAt      DateTime  @default(now())
  expiresAt      DateTime?

  @@id([conversationId, userId])
  @@index([userId])
  @@index([conversationId])
}

enum AppealStatus {
  PENDING
  APPROVED
  REJECTED
}

model Appeal {
  id          String       @id @default(cuid())
  userId      String
  reportId    String?
  banId       String?      // format: "conversationId:userId" for ConversationBan
  reason      String
  status      AppealStatus @default(PENDING)
  reviewedBy  String?
  reviewNotes String?
  createdAt   DateTime     @default(now())
  reviewedAt  DateTime?

  @@index([status, createdAt])
  @@index([userId])
}

// ============ PUSH SUBSCRIPTIONS ============

model PushSubscription {
  id        String   @id @default(cuid())
  userId    String
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())

  @@index([userId])
}

// ============ STARS & PINS ============

model Star {
  messageId String
  userId    String
  createdAt DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([messageId, userId])
  @@index([userId, createdAt])
  @@index([messageId])
}

model Pin {
  id             String   @id @default(cuid())
  conversationId String
  messageId      String
  pinnedBy       String
  createdAt      DateTime @default(now())

   // ðŸ”— Bá»• sung FK Ä‘á»ƒ Ä‘áº£m báº£o toÃ n váº¹n
  conversation   Conversation  @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  message        Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@unique([conversationId, messageId])
  @@index([conversationId, createdAt])
}

// ============ LINK PREVIEW (PHáº¦N 30) ============

model LinkPreview {
  url         String   @id
  siteName    String?
  title       String?
  description String?
  imageUrl    String?
  iconUrl     String?
  mediaType   String?  // "article" | "video" | "image" | ...
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MessageLink {
  messageId String
  url       String
  createdAt DateTime @default(now())

  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([messageId, url])
  @@index([url])
}